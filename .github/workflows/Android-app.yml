name: ITVAPP-LIVETV APP for Android

on:
  workflow_dispatch:  # 仅支持手动触发
    inputs:
      enable_obfuscation:
        description: '是否启用代码混淆'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      cpu_architecture:
        description: '选择生成的CPU架构'
        required: true
        default: 'armeabi-v7a'
        type: choice
        options:
          - 'all'
          - 'armeabi-v7a'
          - 'arm64-v8a'

jobs:
  build_android:
    runs-on: ubuntu-latest  # 使用 Ubuntu 环境
    
    env:
      PLAYLIST_FILE: playlists.m3u  # 定义M3U文件名变量
      ENABLE_OBFUSCATION: ${{ github.event.inputs.enable_obfuscation }}
      CPU_ARCHITECTURE: ${{ github.event.inputs.cpu_architecture }}
      
    steps:
      - uses: actions/checkout@v4  # 检出代码
      - uses: actions/setup-java@v3  # 设置 Java 环境
        with:
          distribution: 'zulu'  # 使用 Zulu 发行版的 Java 环境
          java-version: '17'  # 设置 Java 版本为 17
      - uses: actions/setup-node@v3  # 添加 Node.js 环境，用于 XOR 加密
        with:
          node-version: '16'  # 使用 Node.js 16
      - uses: subosito/flutter-action@v2  # 设置 Flutter 环境
        with:
          flutter-version: '3.29.0'  # 使用 Flutter 的最新稳定版本
          channel: 'stable'  # 使用 stable 渠道版本
      - run: flutter pub get  # 获取项目依赖

      - name: Fix hashValues in better_player
        run: |
          # 定义 better_player 包路径
          BETTER_PLAYER_DIR=$HOME/.pub-cache/hosted/pub.dev/better_player-0.0.84/lib/src/hls/hls_parser
          
          # 检查是否需要修复 (检查任意一个文件即可)
          if grep -q "hashValues" "$BETTER_PLAYER_DIR"/*.dart 2>/dev/null; then
            echo "Found hashValues in better_player files, applying fixes..."
            
            # 替换所有文件中的简单 hashValues 调用
            find "$BETTER_PLAYER_DIR" -name "*.dart" -type f -exec sed -i 's/int get hashCode => hashValues(/int get hashCode => Object.hash(/g' {} \;
            
            # 无需替换结束括号，因为它们的格式是一样的
          else
            echo "No hashValues found in better_player, no fix needed"
          fi

      - name: Add namespace to better_player  # 添加 namespace 到 better_player 插件配置
        run: |
          sed -i '/android {/a\    namespace "com.jhomlala.better_player"' $HOME/.pub-cache/hosted/pub.dev/better_player-0.0.84/android/build.gradle
          # 在 better_player 插件的 build.gradle 文件中添加 namespace 配置，以避免冲突

      - name: Obfuscate JS and M3U files
        run: |
          npm install javascript-obfuscator  # 安装 JS 混淆工具
          if [ "$ENABLE_OBFUSCATION" = "true" ]; then
            echo "Applying JavaScript obfuscation..."
            ./node_modules/.bin/javascript-obfuscator assets/js/time_interceptor.js --output assets/js/time_interceptor.js --compact true --control-flow-flattening true
            ./node_modules/.bin/javascript-obfuscator assets/js/m3u8_detector.js --output assets/js/m3u8_detector.js --compact true --control-flow-flattening true
            ./node_modules/.bin/javascript-obfuscator assets/js/cleanup_script.js --output assets/js/cleanup_script.js --compact true --control-flow-flattening true
            ./node_modules/.bin/javascript-obfuscator assets/js/click_handler.js --output assets/js/click_handler.js --compact true --control-flow-flattening true
          else
            echo "Skipping JavaScript obfuscation based on workflow settings"
          fi
          
          if [ -f "assets/$PLAYLIST_FILE" ]; then
            echo "Encrypting entire M3U file with XOR..."
            node -e '
              const fs = require("fs");
              const content = fs.readFileSync("assets/'"$PLAYLIST_FILE"'", "utf8");
              const key = "itvapp-livetv-secret-2025"; // 加密解密的密钥，与 config.dart 中的 m3uXorKey 一致
              let encrypted = "";
              for (let i = 0; i < content.length; i++) {
                encrypted += String.fromCharCode(content.charCodeAt(i) ^ key.charCodeAt(i % key.length));
              }
              encrypted = Buffer.from(encrypted, "binary").toString("base64");
              fs.writeFileSync("assets/'"$PLAYLIST_FILE"'", encrypted);
            '
          else
            echo "No $PLAYLIST_FILE found in assets/"
          fi

      - name: Create apk directory in root  # 在项目根目录创建 APK 存放目录
        run: mkdir -p apk

      - name: Decode keystore  # 解码密钥库文件并保存到指定路径
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > android/app/LIVETV.jks
          # 将存储在 GitHub Secrets 中的密钥库文件进行解码并保存到 android/app 目录下

      - name: Build APK for armeabi-v7a  # 构建适用于 armeabi-v7a 架构的 APK 文件
        if: ${{ env.CPU_ARCHITECTURE == 'all' || env.CPU_ARCHITECTURE == 'armeabi-v7a' }}
        run: |
          if [ "$ENABLE_OBFUSCATION" = "true" ]; then
            flutter build apk --dart-define=isTV=false --dart-define=enableObfuscation=true --release --target-platform android-arm --split-per-abi --obfuscate --split-debug-info=debug-info
          else
            flutter build apk --dart-define=isTV=false --dart-define=enableObfuscation=false --release --target-platform android-arm --split-per-abi
          fi
          mv build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk apk/ITVAPP-livetv-armeabi-v7a-${{ github.ref_name }}.apk
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_ALIAS_PASSWORD: ${{ secrets.KEY_ALIAS_PASSWORD }}

      - name: Build APK for arm64-v8a  # 构建适用于 arm64-v8a 架构的 APK 文件
        if: ${{ env.CPU_ARCHITECTURE == 'all' || env.CPU_ARCHITECTURE == 'arm64-v8a' }}
        run: |
          if [ "$ENABLE_OBFUSCATION" = "true" ]; then
            flutter build apk --dart-define=isTV=false --dart-define=enableObfuscation=true --release --target-platform android-arm64 --split-per-abi --obfuscate --split-debug-info=debug-info
          else
            flutter build apk --dart-define=isTV=false --dart-define=enableObfuscation=false --release --target-platform android-arm64 --split-per-abi
          fi
          mv build/app/outputs/flutter-apk/app-arm64-v8a-release.apk apk/ITVAPP-livetv-arm64-v8a-${{ github.ref_name }}.apk
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_ALIAS_PASSWORD: ${{ secrets.KEY_ALIAS_PASSWORD }}

      - name: Upload Android artifacts  # 上传构建生成的 APK 文件作为构建产物
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: apk/

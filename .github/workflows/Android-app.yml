name: ITVAPP-LIVETV APP for Android

on:
  workflow_dispatch:  # 仅支持手动触发
    inputs:
      enable_obfuscation:
        description: '是否启用代码混淆'  # 是否开启代码混淆选项
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      cpu_architecture:
        description: '选择生成的CPU架构'  # 选择构建的CPU架构
        required: true
        default: 'armeabi-v7a'
        type: choice
        options:
          - 'all'
          - 'armeabi-v7a'
          - 'arm64-v8a'
      build_versions:
        description: '选择构建的版本类型'  # 选择构建国际版或国内版 
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'         # 同时构建国际版和国内版
          - 'overseas'    # 仅构建国际版
          - 'china'       # 仅构建国内版

env:
  PLAYLIST_FILE: playlists.m3u          # M3U播放列表文件名
  FLUTTER_VERSION: '3.29.0'             # Flutter版本
  NODE_VERSION: '16'                    # Node.js版本
  JAVA_VERSION: '17'                    # Java版本
  CN_APP_NAME: '电视宝直播'              # 中国版应用名称
  OVERSEAS_APP_NAME: '電視寶直播'        # 海外版应用名称

jobs:
  build_android:
    runs-on: ubuntu-latest  # 使用最新Ubuntu环境
    env:
      ENABLE_OBFUSCATION: ${{ github.event.inputs.enable_obfuscation }}  # 代码混淆配置
      CPU_ARCHITECTURE: ${{ github.event.inputs.cpu_architecture }}     # CPU架构配置
      BUILD_VERSIONS: ${{ github.event.inputs.build_versions }}         # 版本类型配置
    steps:
      - name: 检出代码
        uses: actions/checkout@v4  # 检出仓库代码

      - name: 设置Java环境
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'                    # 使用Zulu发行版Java
          java-version: ${{ env.JAVA_VERSION }}   # 设置Java版本

      - name: 设置Node.js环境
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}   # 设置Node.js版本

      - name: 设置Flutter环境
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}  # 设置Flutter版本
          channel: 'stable'                           # 使用stable渠道

      - name: 获取项目依赖
        run: flutter pub get  # 安装Flutter项目依赖

      - name: 安装JavaScript混淆工具
        if: ${{ env.ENABLE_OBFUSCATION == 'true' }}  # 仅当启用混淆时执行
        run: npm install javascript-obfuscator  # 安装JS混淆工具

      - name: 混淆JavaScript文件
        if: ${{ env.ENABLE_OBFUSCATION == 'true' }}  # 仅当启用混淆时执行
        run: |
          echo "Applying JavaScript obfuscation..."
          # 定义待混淆的JS文件列表
          JS_FILES=(
            "assets/js/time_interceptor.js"
            "assets/js/m3u8_detector.js"
            "assets/js/click_handler.js"
            "assets/js/form_detection.js"
            "assets/js/fingerprint_randomization.js"
            "assets/js/dom_change_monitor.js"
          )
          # 对每个JS文件进行混淆
          for file in "${JS_FILES[@]}"; do
            if [ -f "$file" ]; then
              ./node_modules/.bin/javascript-obfuscator "$file" --output "$file" --compact true --control-flow-flattening true
              echo "Obfuscated $file"
            else
              echo "Warning: $file not found, skipping obfuscation"
            fi
          done

      - name: 加密M3U文件
        run: |
          if [ -f "assets/$PLAYLIST_FILE" ]; then
            echo "Encrypting entire M3U file with XOR..."
            node -e '
              const fs = require("fs");
              const content = fs.readFileSync("assets/'"$PLAYLIST_FILE"'", "utf8");
              const key = "itvapp-livetv-secret-2025"; // 与config.dart的m3uXorKey一致
              const contentBytes = Buffer.from(content, "utf8");
              const keyBytes = Buffer.from(key, "utf8");
              for (let i = 0; i < contentBytes.length; i++) {
                contentBytes[i] = contentBytes[i] ^ keyBytes[i % keyBytes.length];
              }
              const encrypted = contentBytes.toString("base64");
              fs.writeFileSync("assets/'"$PLAYLIST_FILE"'", encrypted);
            '
            echo "M3U file encrypted successfully"
          else
            echo "Warning: No $PLAYLIST_FILE found in assets/ directory"
          fi

      - name: 创建APK存放目录
        run: mkdir -p apk  # 创建APK输出目录

      - name: 解码密钥库
        run: |
          # 解码Base64编码的密钥库文件
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > android/app/LIVETV.jks
          if [ -f "android/app/LIVETV.jks" ]; then
            echo "Keystore decoded successfully"
          else
            echo "Error: Failed to decode keystore"
            exit 1
          fi

      - name: 备份配置文件
        run: |
          cp lib/config.dart lib/config.dart.bak  # 备份原始配置文件
          echo "Original config file backed up"

      - name: 备份AndroidManifest.xml文件
        run: |
          cp android/app/src/main/AndroidManifest.xml android/app/src/main/AndroidManifest.xml.bak  # 备份原始AndroidManifest文件
          echo "Original AndroidManifest.xml file backed up"

      - name: 准备构建环境变量
        run: |
          # 创建构建工具脚本
          cat > build_utils.sh << 'EOF'
          #!/bin/bash
          # 生成构建命令的函数
          function generate_build_command() {
            local platform=$1
            local version_type=$2
            local enable_obfuscation=$3
            local architecture_name=${platform#android-}
            local abi_name=""
            # 确定ABI名称
            if [ "$platform" = "android-arm" ]; then
              abi_name="armeabi-v7a"
            elif [ "$platform" = "android-arm64" ]; then
              abi_name="arm64-v8a"
            fi
            # 构建基础命令
            local cmd="flutter build apk --dart-define=isTV=false --release --target-platform $platform --split-per-abi"
            # 根据混淆设置添加参数
            if [ "$enable_obfuscation" = "true" ]; then
              cmd="$cmd --dart-define=enableObfuscation=true --obfuscate --split-debug-info=debug-info"
            else
              cmd="$cmd --dart-define=enableObfuscation=false"
            fi
            # 设置输出文件名
            local output_file="ITVAPP-livetv-${version_type}-${abi_name}.apk"
            # 返回构建命令和输出文件名
            echo "$cmd|$output_file|app-${abi_name}-release.apk"
          }
          # 修改配置文件为指定版本
          function set_version_config() {
            local version_type=$1
            # 恢复原始配置
            cp lib/config.dart.bak lib/config.dart
            # 恢复原始AndroidManifest.xml
            cp android/app/src/main/AndroidManifest.xml.bak android/app/src/main/AndroidManifest.xml
            
            if [ "$version_type" = "overseas" ]; then
              # 设置为国际版
              sed -i 's/static const bool cnversion = true;/static const bool cnversion = false;/g' lib/config.dart
              # 修改应用名称为海外版名称
              sed -i "s/android:label=\"[^\"]*\"/android:label=\"$OVERSEAS_APP_NAME\"/g" android/app/src/main/AndroidManifest.xml
              echo "Set configuration and app name for overseas version: $OVERSEAS_APP_NAME"
            elif [ "$version_type" = "china" ]; then
              # 设置为国内版
              sed -i 's/static const bool cnversion = false;/static const bool cnversion = true;/g' lib/config.dart
              # 确保cnversion为true
              if ! grep -q "static const bool cnversion = true;" lib/config.dart; then
                echo "Backup fix: Setting cnversion to true..."
                sed -i 's/static const bool cnversion =.*;/static const bool cnversion = true;/g' lib/config.dart
              fi
              # 修改应用名称为中国版名称
              sed -i "s/android:label=\"[^\"]*\"/android:label=\"$CN_APP_NAME\"/g" android/app/src/main/AndroidManifest.xml
              echo "Set configuration and app name for China version: $CN_APP_NAME"
            else
              echo "Error: Unknown version type $version_type"
              return 1
            fi
            # 打印配置确认
            echo "Current config setting:"
            grep "cnversion" lib/config.dart
            echo "Current app name setting:"
            grep "android:label" android/app/src/main/AndroidManifest.xml
            return 0
          }
          # 执行构建并移动APK
          function build_and_move_apk() {
            local build_cmd=$1
            local target_apk=$2
            local source_apk=$3
            echo "Executing: $build_cmd"
            eval $build_cmd
            if [ -f "build/app/outputs/flutter-apk/$source_apk" ]; then
              mv "build/app/outputs/flutter-apk/$source_apk" "apk/$target_apk"
              echo "Built $target_apk successfully"
              return 0
            else
              echo "Error: Failed to build $target_apk, source file not found"
              return 1
            fi
          }
          EOF
          chmod +x build_utils.sh  # 使脚本可执行
          # 导出环境变量
          echo "ENABLE_OBFUSCATION=$ENABLE_OBFUSCATION" >> $GITHUB_ENV
          echo "CPU_ARCHITECTURE=$CPU_ARCHITECTURE" >> $GITHUB_ENV
          echo "BUILD_VERSIONS=$BUILD_VERSIONS" >> $GITHUB_ENV

      - name: 构建所有需要的APK版本
        run: |
          source ./build_utils.sh
          # 定义版本类型列表
          version_types=()
          if [ "$BUILD_VERSIONS" = "all" ]; then
            version_types=("overseas" "china")
          elif [ "$BUILD_VERSIONS" = "overseas" ]; then
            version_types=("overseas")
          elif [ "$BUILD_VERSIONS" = "china" ]; then
            version_types=("china")
          fi
          # 定义架构列表
          platforms=()
          if [ "$CPU_ARCHITECTURE" = "all" ]; then
            platforms=("android-arm" "android-arm64")
          elif [ "$CPU_ARCHITECTURE" = "armeabi-v7a" ]; then
            platforms=("android-arm")
          elif [ "$CPU_ARCHITECTURE" = "arm64-v8a" ]; then
            platforms=("android-arm64")
          fi
          # 循环构建各版本和架构
          for version in "${version_types[@]}"; do
            set_version_config "$version"  # 设置版本配置
            for platform in "${platforms[@]}"; do
              # 生成构建命令
              build_info=$(generate_build_command "$platform" "$version" "$ENABLE_OBFUSCATION")
              IFS='|' read -r build_cmd target_apk source_apk <<< "$build_info"
              # 执行构建并移动APK
              build_and_move_apk "$build_cmd" "$target_apk" "$source_apk"
            done
          done
          # 恢复原始配置
          if [ -f "lib/config.dart.bak" ]; then
            cp lib/config.dart.bak lib/config.dart
            rm lib/config.dart.bak
            echo "Restored original config file"
          fi
          # 恢复原始AndroidManifest.xml
          if [ -f "android/app/src/main/AndroidManifest.xml.bak" ]; then
            cp android/app/src/main/AndroidManifest.xml.bak android/app/src/main/AndroidManifest.xml
            rm android/app/src/main/AndroidManifest.xml.bak
            echo "Restored original AndroidManifest.xml file"
          fi
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}  # 密钥库密码
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}                # 密钥别名
          KEY_ALIAS_PASSWORD: ${{ secrets.KEY_ALIAS_PASSWORD }}  # 密钥别名密码
          CN_APP_NAME: ${{ env.CN_APP_NAME }}                 # 中国版应用名称
          OVERSEAS_APP_NAME: ${{ env.OVERSEAS_APP_NAME }}     # 海外版应用名称

      - name: 上传构建产物
        uses: actions/upload-artifact@v4.6.2
        with:
          name: android-artifacts  # 构建产物名称
          path: apk/              # 上传APK目录
          retention-days: 7       # 保留7天

name: ITVAPP-LIVETV APP

on:
  workflow_dispatch:  # 仅支持手动触发

jobs:
  build_android:
    runs-on: ubuntu-latest  # 使用 Ubuntu 环境
    
    env:
      PLAYLIST_FILE: playlists.m3u  # 定义M3U文件名变量
      
    steps:
      - uses: actions/checkout@v4  # 检出代码
      - uses: actions/setup-java@v3  # 设置 Java 环境
        with:
          distribution: 'zulu'  # 使用 Zulu 发行版的 Java 环境
          java-version: '17'  # 设置 Java 版本为 17
      - uses: actions/setup-node@v3  # 添加 Node.js 环境，用于 XOR 加密
        with:
          node-version: '16'  # 使用 Node.js 16
      - uses: subosito/flutter-action@v2  # 设置 Flutter 环境
        with:
          flutter-version: '3.24.0'  # 使用 Flutter 的最新稳定版本
          channel: 'stable'  # 使用 stable 渠道版本
      - run: flutter pub get  # 获取项目依赖

      - name: Add namespace to better_player  # 添加 namespace 到 better_player 插件配置
        run: |
          sed -i '/android {/a\    namespace "com.jhomlala.better_player"' $HOME/.pub-cache/hosted/pub.dev/better_player-0.0.84/android/build.gradle
          # 在 better_player 插件的 build.gradle 文件中添加 namespace 配置，以避免冲突

      - name: Obfuscate JS and M3U files
        run: |
          npm install javascript-obfuscator  # 安装 JS 混淆工具
          ./node_modules/.bin/javascript-obfuscator assets/js/time_interceptor.js --output assets/js/time_interceptor.js --compact true --control-flow-flattening true
          ./node_modules/.bin/javascript-obfuscator assets/js/m3u8_detector.js --output assets/js/m3u8_detector.js --compact true --control-flow-flattening true
          ./node_modules/.bin/javascript-obfuscator assets/js/cleanup.js --output assets/js/cleanup.js --compact true --control-flow-flattening true
          ./node_modules/.bin/javascript-obfuscator assets/js/click_handler.js --output assets/js/click_handler.js --compact true --control-flow-flattening true
          if [ -f "assets/$PLAYLIST_FILE" ]; then
            echo "Obfuscating M3U file with XOR..."
            node -e '
              const fs = require("fs");
              const input = fs.readFileSync("assets/'"$PLAYLIST_FILE"'", "utf8").split("\n");
              const key = "itvapp-livetv-secret-2025"; // 与 config.dart 中的 m3uXorKey 一致
              let output = [];
              for (let line of input) {
                if (line.match(/^http/)) {
                  let encrypted = "";
                  for (let i = 0; i < line.length; i++) {
                    encrypted += String.fromCharCode(line.charCodeAt(i) ^ key.charCodeAt(i % key.length));
                  }
                  encrypted = Buffer.from(encrypted, "binary").toString("base64");
                  output.push("XOR_" + encrypted);
                } else {
                  output.push(line);
                }
              }
              fs.writeFileSync("assets/'"$PLAYLIST_FILE"'", output.join("\n"));
            '
          else
            echo "No $PLAYLIST_FILE found in assets/"
          fi

      - name: Create apk directory in root  # 在项目根目录创建 APK 存放目录
        run: mkdir -p apk

      - name: Decode keystore  # 解码密钥库文件并保存到指定路径
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > android/app/LIVETV.jks
          # 将存储在 GitHub Secrets 中的密钥库文件进行解码并保存到 android/app 目录下

      - name: Build APK for armeabi-v7a  # 构建适用于 armeabi-v7a 架构的 APK 文件
        run: |
          flutter build apk --dart-define=isTV=false --release --target-platform android-arm --split-per-abi --obfuscate --split-debug-info=debug-info
          mv build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk apk/ITVAPP-livetv-armeabi-v7a-${{ github.ref_name }}.apk
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_ALIAS_PASSWORD: ${{ secrets.KEY_ALIAS_PASSWORD }}

      - name: Build APK for arm64-v8a  # 构建适用于 arm64-v8a 架构的 APK 文件
        run: |
          flutter build apk --dart-define=isTV=false --release --target-platform android-arm64 --split-per-abi --obfuscate --split-debug-info=debug-info
          mv build/app/outputs/flutter-apk/app-arm64-v8a-release.apk apk/ITVAPP-livetv-arm64-v8a-${{ github.ref_name }}.apk
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_ALIAS_PASSWORD: ${{ secrets.KEY_ALIAS_PASSWORD }}

      - name: Upload Android artifacts  # 上传构建生成的 APK 文件作为构建产物
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: |
            apk/ITVAPP-livetv-armeabi-v7a-${{ github.ref_name }}.apk
            apk/ITVAPP-livetv-arm64-v8a-${{ github.ref_name }}.apk

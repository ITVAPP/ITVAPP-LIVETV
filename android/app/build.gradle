plugins {
    id "com.android.application"          // 应用程序插件，构建Android应用的必备插件
    id "kotlin-android"                   // Kotlin插件，支持Kotlin语言编写的Android代码
    id "dev.flutter.flutter-gradle-plugin" // Flutter插件，用于构建Flutter应用的必备插件
}

// 定义一个Properties对象，用于加载local.properties文件中的配置
def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties") // 获取local.properties文件

// 如果local.properties文件存在，则加载文件中的属性
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader) // 使用UTF-8编码加载属性文件
    }
}

// 从local.properties中获取flutter版本代码，如果不存在则设置为"1"
def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

// 从local.properties中获取flutter版本名称，如果不存在则设置为"1.0"
def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

// Android配置块，用于配置Android构建相关的选项
android {
    namespace = "itvapp_live_tv" // 命名空间，用于定义应用的包名
    compileSdk = 34              // 编译SDK版本，定义编译时使用的Android SDK版本
//    ndkVersion = flutter.ndkVersion // 可选配置，用于指定NDK版本

    // 添加 packagingOptions 配置，用于处理重复的库文件
    packagingOptions {
        pickFirst 'lib/**/libc++_shared.so'
        // 添加以下配置以禁用 Split APKs
        exclude 'lib/*/libapp.so'
        exclude 'lib/*/libflutter.so'
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17  // 指定Java源码的兼容性版本
        targetCompatibility = JavaVersion.VERSION_17  // 指定Java目标字节码的兼容性版本
    }

    kotlinOptions {
        jvmTarget = "17" // 指定Kotlin编译的JVM目标版本
    }

    defaultConfig {
        applicationId = "net.itvapp.livetv" // 应用程序ID，即包名
        minSdk = 21                         // 最低支持的Android SDK版本
        targetSdk = 34                      // 目标SDK版本，定义应用针对的Android SDK版本
        versionCode = flutterVersionCode.toInteger() // 应用版本代码，从local.properties读取
        versionName = flutterVersionName             // 应用版本名称，从local.properties读取
    }

    signingConfigs {
        release {
            storeFile file("LIVETV.jks")                          // 指定签名密钥库文件
            storePassword System.getenv("KEYSTORE_PASSWORD")       // 签名密钥库密码，从环境变量读取
            keyAlias System.getenv("KEY_ALIAS")                    // 签名密钥别名，从环境变量读取
            keyPassword System.getenv("KEY_ALIAS_PASSWORD")        // 签名密钥密码，从环境变量读取
        }
    }

    buildTypes {
        release {
            minifyEnabled true // 启用代码混淆和压缩
            shrinkResources true // 移除未使用的资源，减少APK的大小
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' // 添加 ProGuard 配置文件
            signingConfig = signingConfigs.release // 使用release签名配置
            // 禁用 Split APKs
            splits.abi.enable = false
            splits.density.enable = false
        }
    }
}

// Flutter插件配置块，用于指定Flutter项目的源目录
flutter {
    source = "../.." // 指定Flutter项目的根目录位置
}

// 依赖项配置块，用于声明项目的依赖库
dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4' // 使用desugar库提供Java 8+ API支持
}
